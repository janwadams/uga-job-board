import { useEffect, useState } from 'react';
import { createClient } from '@supabase/supabase-js';
import { useRouter } from 'next/router';

const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

interface AdminUser {
  user_id: string;
  role: string;
  is_active: boolean;
  last_sign_in_at: string | null;
  jobs_posted: number;
}

export default function AdminDashboard() {
  const [users, setUsers] = useState<AdminUser[]>([]);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    const fetchAdminData = async () => {
      // Step 1: Get role & is_active from user_roles
      const { data: rolesData, error: rolesError } = await supabaseAdmin
        .from('user_roles')
        .select('*');

      if (rolesError || !rolesData) {
        console.error('Error fetching user_roles:', rolesError);
        setLoading(false);
        return;
      }

      // Step 2: Get auth users (for last login)
      const { data: authUsers, error: authError } = await supabaseAdmin.auth.admin.listUsers();

      if (authError) {
        console.error('Error fetching auth users:', authError);
        setLoading(false);
        return;
      }

      // Step 3: Get jobs to count postings per user
      const { data: jobsData, error: jobsError } = await supabaseAdmin
        .from('jobs')
        .select('created_by');

      if (jobsError) {
        console.error('Error fetching jobs:', jobsError);
        setLoading(false);
        return;
      }

      const jobCountMap = jobsData?.reduce((acc: any, job: any) => {
        acc[job.created_by] = (acc[job.created_by] || 0) + 1;
        return acc;
      }, {}) || {};

      // Step 4: Map users together
      const enrichedUsers: AdminUser[] = rolesData.map((user) => {
        const authUser = authUsers?.users?.find((au: any) => au.id === user.user_id);
        return {
          user_id: user.user_id,
          role: user.role,
          is_active: user.is_active,
          last_sign_in_at: authUser?.last_sign_in_at || null,
          jobs_posted: jobCountMap[user.user_id] || 0,
        };
      });

      setUsers(enrichedUsers);
      setLoading(false);
    };

    fetchAdminData();
  }, []);

  return (
    <div className="p-8">
      <h1 className="text-2xl font-bold mb-4 text-red-800">ðŸ‘¥ Admin: Manage Users</h1>

      {loading ? (
        <p>Loading...</p>
      ) : (
        <table className="min-w-full table-auto border-collapse border border-gray-200">
          <thead className="bg-gray-100">
            <tr>
              <th className="border px-4 py-2">User ID</th>
              <th className="border px-4 py-2">Current Role</th>
              <th className="border px-4 py-2">Status</th>
              <th className="border px-4 py-2">Last Login</th>
              <th className="border px-4 py-2">Jobs Posted</th>
              <th className="border px-4 py-2">Actions</th>
            </tr>
          </thead>
          <tbody>
            {users.map((user) => (
              <tr key={user.user_id} className="text-center">
                <td className="border px-4 py-2">{user.user_id}</td>
                <td className="border px-4 py-2 capitalize">{user.role}</td>
                <td className="border px-4 py-2">
                  {user.is_active ? (
                    <span className="text-green-600 font-semibold">Active</span>
                  ) : (
                    <span className="text-red-600 font-semibold">Disabled</span>
                  )}
                </td>
                <td className="border px-4 py-2 text-sm">
                  {user.last_sign_in_at
                    ? new Date(user.last_sign_in_at).toLocaleString()
                    : 'Never'}
                </td>
                <td className="border px-4 py-2">{user.jobs_posted}</td>
                <td className="border px-4 py-2">
                  <button className="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700">
                    {user.is_active ? 'Disable' : 'Enable'}
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}
